// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2024 21:09:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    latches
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module latches_vlg_sample_tst(
	D,
	EN1,
	EN2,
	R1,
	R2,
	R3,
	S1,
	S2,
	S3,
	sampler_tx
);
input  D;
input  EN1;
input  EN2;
input  R1;
input  R2;
input  R3;
input  S1;
input  S2;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(D or EN1 or EN2 or R1 or R2 or R3 or S1 or S2 or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module latches_vlg_check_tst (
	Q1LatchD,
	Q1LatchEN,
	Q1LatchNAND,
	Q1LatchNOR,
	Q2LatchD,
	Q2LatchEN,
	Q2LatchNAND,
	Q2LatchNOR,
	R2N,
	S2N,
	sampler_rx
);
input  Q1LatchD;
input  Q1LatchEN;
input  Q1LatchNAND;
input  Q1LatchNOR;
input  Q2LatchD;
input  Q2LatchEN;
input  Q2LatchNAND;
input  Q2LatchNOR;
input  R2N;
input  S2N;
input sampler_rx;

reg  Q1LatchD_expected;
reg  Q1LatchEN_expected;
reg  Q1LatchNAND_expected;
reg  Q1LatchNOR_expected;
reg  Q2LatchD_expected;
reg  Q2LatchEN_expected;
reg  Q2LatchNAND_expected;
reg  Q2LatchNOR_expected;
reg  R2N_expected;
reg  S2N_expected;

reg  Q1LatchD_prev;
reg  Q1LatchEN_prev;
reg  Q1LatchNAND_prev;
reg  Q1LatchNOR_prev;
reg  Q2LatchD_prev;
reg  Q2LatchEN_prev;
reg  Q2LatchNAND_prev;
reg  Q2LatchNOR_prev;
reg  R2N_prev;
reg  S2N_prev;

reg  Q1LatchD_expected_prev;
reg  Q1LatchEN_expected_prev;
reg  Q1LatchNAND_expected_prev;
reg  Q1LatchNOR_expected_prev;
reg  Q2LatchD_expected_prev;
reg  Q2LatchEN_expected_prev;
reg  Q2LatchNAND_expected_prev;
reg  Q2LatchNOR_expected_prev;
reg  R2N_expected_prev;
reg  S2N_expected_prev;

reg  last_Q1LatchD_exp;
reg  last_Q1LatchEN_exp;
reg  last_Q1LatchNAND_exp;
reg  last_Q1LatchNOR_exp;
reg  last_Q2LatchD_exp;
reg  last_Q2LatchEN_exp;
reg  last_Q2LatchNAND_exp;
reg  last_Q2LatchNOR_exp;
reg  last_R2N_exp;
reg  last_S2N_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q1LatchD_prev = Q1LatchD;
	Q1LatchEN_prev = Q1LatchEN;
	Q1LatchNAND_prev = Q1LatchNAND;
	Q1LatchNOR_prev = Q1LatchNOR;
	Q2LatchD_prev = Q2LatchD;
	Q2LatchEN_prev = Q2LatchEN;
	Q2LatchNAND_prev = Q2LatchNAND;
	Q2LatchNOR_prev = Q2LatchNOR;
	R2N_prev = R2N;
	S2N_prev = S2N;
end

// update expected /o prevs

always @(trigger)
begin
	Q1LatchD_expected_prev = Q1LatchD_expected;
	Q1LatchEN_expected_prev = Q1LatchEN_expected;
	Q1LatchNAND_expected_prev = Q1LatchNAND_expected;
	Q1LatchNOR_expected_prev = Q1LatchNOR_expected;
	Q2LatchD_expected_prev = Q2LatchD_expected;
	Q2LatchEN_expected_prev = Q2LatchEN_expected;
	Q2LatchNAND_expected_prev = Q2LatchNAND_expected;
	Q2LatchNOR_expected_prev = Q2LatchNOR_expected;
	R2N_expected_prev = R2N_expected;
	S2N_expected_prev = S2N_expected;
end



// expected Q1LatchNOR
initial
begin
	Q1LatchNOR_expected = 1'bX;
end 

// expected Q2LatchNOR
initial
begin
	Q2LatchNOR_expected = 1'bX;
end 

// expected S2N
initial
begin
	S2N_expected = 1'bX;
end 

// expected R2N
initial
begin
	R2N_expected = 1'bX;
end 

// expected Q1LatchNAND
initial
begin
	Q1LatchNAND_expected = 1'bX;
end 

// expected Q2LatchNAND
initial
begin
	Q2LatchNAND_expected = 1'bX;
end 

// expected Q1LatchEN
initial
begin
	Q1LatchEN_expected = 1'bX;
end 

// expected Q2LatchEN
initial
begin
	Q2LatchEN_expected = 1'bX;
end 

// expected Q1LatchD
initial
begin
	Q1LatchD_expected = 1'bX;
end 

// expected Q2LatchD
initial
begin
	Q2LatchD_expected = 1'bX;
end 
// generate trigger
always @(Q1LatchD_expected or Q1LatchD or Q1LatchEN_expected or Q1LatchEN or Q1LatchNAND_expected or Q1LatchNAND or Q1LatchNOR_expected or Q1LatchNOR or Q2LatchD_expected or Q2LatchD or Q2LatchEN_expected or Q2LatchEN or Q2LatchNAND_expected or Q2LatchNAND or Q2LatchNOR_expected or Q2LatchNOR or R2N_expected or R2N or S2N_expected or S2N)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q1LatchD = %b | expected Q1LatchEN = %b | expected Q1LatchNAND = %b | expected Q1LatchNOR = %b | expected Q2LatchD = %b | expected Q2LatchEN = %b | expected Q2LatchNAND = %b | expected Q2LatchNOR = %b | expected R2N = %b | expected S2N = %b | ",Q1LatchD_expected_prev,Q1LatchEN_expected_prev,Q1LatchNAND_expected_prev,Q1LatchNOR_expected_prev,Q2LatchD_expected_prev,Q2LatchEN_expected_prev,Q2LatchNAND_expected_prev,Q2LatchNOR_expected_prev,R2N_expected_prev,S2N_expected_prev);
	$display("| real Q1LatchD = %b | real Q1LatchEN = %b | real Q1LatchNAND = %b | real Q1LatchNOR = %b | real Q2LatchD = %b | real Q2LatchEN = %b | real Q2LatchNAND = %b | real Q2LatchNOR = %b | real R2N = %b | real S2N = %b | ",Q1LatchD_prev,Q1LatchEN_prev,Q1LatchNAND_prev,Q1LatchNOR_prev,Q2LatchD_prev,Q2LatchEN_prev,Q2LatchNAND_prev,Q2LatchNOR_prev,R2N_prev,S2N_prev);
`endif
	if (
		( Q1LatchD_expected_prev !== 1'bx ) && ( Q1LatchD_prev !== Q1LatchD_expected_prev )
		&& ((Q1LatchD_expected_prev !== last_Q1LatchD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1LatchD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1LatchD_expected_prev);
		$display ("     Real value = %b", Q1LatchD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1LatchD_exp = Q1LatchD_expected_prev;
	end
	if (
		( Q1LatchEN_expected_prev !== 1'bx ) && ( Q1LatchEN_prev !== Q1LatchEN_expected_prev )
		&& ((Q1LatchEN_expected_prev !== last_Q1LatchEN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1LatchEN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1LatchEN_expected_prev);
		$display ("     Real value = %b", Q1LatchEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1LatchEN_exp = Q1LatchEN_expected_prev;
	end
	if (
		( Q1LatchNAND_expected_prev !== 1'bx ) && ( Q1LatchNAND_prev !== Q1LatchNAND_expected_prev )
		&& ((Q1LatchNAND_expected_prev !== last_Q1LatchNAND_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1LatchNAND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1LatchNAND_expected_prev);
		$display ("     Real value = %b", Q1LatchNAND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1LatchNAND_exp = Q1LatchNAND_expected_prev;
	end
	if (
		( Q1LatchNOR_expected_prev !== 1'bx ) && ( Q1LatchNOR_prev !== Q1LatchNOR_expected_prev )
		&& ((Q1LatchNOR_expected_prev !== last_Q1LatchNOR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1LatchNOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1LatchNOR_expected_prev);
		$display ("     Real value = %b", Q1LatchNOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q1LatchNOR_exp = Q1LatchNOR_expected_prev;
	end
	if (
		( Q2LatchD_expected_prev !== 1'bx ) && ( Q2LatchD_prev !== Q2LatchD_expected_prev )
		&& ((Q2LatchD_expected_prev !== last_Q2LatchD_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2LatchD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2LatchD_expected_prev);
		$display ("     Real value = %b", Q2LatchD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q2LatchD_exp = Q2LatchD_expected_prev;
	end
	if (
		( Q2LatchEN_expected_prev !== 1'bx ) && ( Q2LatchEN_prev !== Q2LatchEN_expected_prev )
		&& ((Q2LatchEN_expected_prev !== last_Q2LatchEN_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2LatchEN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2LatchEN_expected_prev);
		$display ("     Real value = %b", Q2LatchEN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q2LatchEN_exp = Q2LatchEN_expected_prev;
	end
	if (
		( Q2LatchNAND_expected_prev !== 1'bx ) && ( Q2LatchNAND_prev !== Q2LatchNAND_expected_prev )
		&& ((Q2LatchNAND_expected_prev !== last_Q2LatchNAND_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2LatchNAND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2LatchNAND_expected_prev);
		$display ("     Real value = %b", Q2LatchNAND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q2LatchNAND_exp = Q2LatchNAND_expected_prev;
	end
	if (
		( Q2LatchNOR_expected_prev !== 1'bx ) && ( Q2LatchNOR_prev !== Q2LatchNOR_expected_prev )
		&& ((Q2LatchNOR_expected_prev !== last_Q2LatchNOR_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2LatchNOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2LatchNOR_expected_prev);
		$display ("     Real value = %b", Q2LatchNOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2LatchNOR_exp = Q2LatchNOR_expected_prev;
	end
	if (
		( R2N_expected_prev !== 1'bx ) && ( R2N_prev !== R2N_expected_prev )
		&& ((R2N_expected_prev !== last_R2N_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2N_expected_prev);
		$display ("     Real value = %b", R2N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2N_exp = R2N_expected_prev;
	end
	if (
		( S2N_expected_prev !== 1'bx ) && ( S2N_prev !== S2N_expected_prev )
		&& ((S2N_expected_prev !== last_S2N_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2N_expected_prev);
		$display ("     Real value = %b", S2N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2N_exp = S2N_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module latches_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D;
reg EN1;
reg EN2;
reg R1;
reg R2;
reg R3;
reg S1;
reg S2;
reg S3;
// wires                                               
wire Q1LatchD;
wire Q1LatchEN;
wire Q1LatchNAND;
wire Q1LatchNOR;
wire Q2LatchD;
wire Q2LatchEN;
wire Q2LatchNAND;
wire Q2LatchNOR;
wire R2N;
wire S2N;

wire sampler;                             

// assign statements (if any)                          
latches i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.EN1(EN1),
	.EN2(EN2),
	.Q1LatchD(Q1LatchD),
	.Q1LatchEN(Q1LatchEN),
	.Q1LatchNAND(Q1LatchNAND),
	.Q1LatchNOR(Q1LatchNOR),
	.Q2LatchD(Q2LatchD),
	.Q2LatchEN(Q2LatchEN),
	.Q2LatchNAND(Q2LatchNAND),
	.Q2LatchNOR(Q2LatchNOR),
	.R1(R1),
	.R2(R2),
	.R2N(R2N),
	.R3(R3),
	.S1(S1),
	.S2(S2),
	.S2N(S2N),
	.S3(S3)
);

// S1
always
begin
	S1 = 1'b0;
	S1 = #500000 1'b1;
	#500000;
end 

// R1
always
begin
	R1 = 1'b0;
	R1 = #250000 1'b1;
	#250000;
end 

// S2
initial
begin
	S2 = 1'b1;
	S2 = #500000 1'b0;
end 

// R2
initial
begin
	R2 = 1'b1;
	R2 = #250000 1'b0;
	R2 = #250000 1'b1;
	R2 = #250000 1'b0;
end 

// S3
always
begin
	S3 = 1'b0;
	S3 = #500000 1'b1;
	#500000;
end 

// R3
always
begin
	R3 = 1'b0;
	R3 = #250000 1'b1;
	#250000;
end 

// EN1
always
begin
	EN1 = 1'b0;
	EN1 = #125000 1'b1;
	#125000;
end 

// D
always
begin
	D = 1'b0;
	D = #500000 1'b1;
	#500000;
end 

// EN2
always
begin
	EN2 = 1'b0;
	EN2 = #250000 1'b1;
	#250000;
end 

latches_vlg_sample_tst tb_sample (
	.D(D),
	.EN1(EN1),
	.EN2(EN2),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_tx(sampler)
);

latches_vlg_check_tst tb_out(
	.Q1LatchD(Q1LatchD),
	.Q1LatchEN(Q1LatchEN),
	.Q1LatchNAND(Q1LatchNAND),
	.Q1LatchNOR(Q1LatchNOR),
	.Q2LatchD(Q2LatchD),
	.Q2LatchEN(Q2LatchEN),
	.Q2LatchNAND(Q2LatchNAND),
	.Q2LatchNOR(Q2LatchNOR),
	.R2N(R2N),
	.S2N(S2N),
	.sampler_rx(sampler)
);
endmodule

