// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2024 00:34:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    flipflopJK_negedge
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module flipflopJK_negedge_vlg_sample_tst(
	CLK,
	E1,
	sampler_tx
);
input  CLK;
input  E1;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or E1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module flipflopJK_negedge_vlg_check_tst (
	J,
	J1,
	K,
	K1,
	Q,
	Q1,
	Q2,
	sampler_rx
);
input  J;
input  J1;
input  K;
input  K1;
input  Q;
input  Q1;
input  Q2;
input sampler_rx;

reg  J_expected;
reg  J1_expected;
reg  K_expected;
reg  K1_expected;
reg  Q_expected;
reg  Q1_expected;
reg  Q2_expected;

reg  J_prev;
reg  J1_prev;
reg  K_prev;
reg  K1_prev;
reg  Q_prev;
reg  Q1_prev;
reg  Q2_prev;

reg  J_expected_prev;
reg  J1_expected_prev;
reg  K_expected_prev;
reg  K1_expected_prev;
reg  Q_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;

reg  last_J_exp;
reg  last_J1_exp;
reg  last_K_exp;
reg  last_K1_exp;
reg  last_Q_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	J_prev = J;
	J1_prev = J1;
	K_prev = K;
	K1_prev = K1;
	Q_prev = Q;
	Q1_prev = Q1;
	Q2_prev = Q2;
end

// update expected /o prevs

always @(trigger)
begin
	J_expected_prev = J_expected;
	J1_expected_prev = J1_expected;
	K_expected_prev = K_expected;
	K1_expected_prev = K1_expected;
	Q_expected_prev = Q_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
end



// expected J
initial
begin
	J_expected = 1'bX;
end 

// expected K
initial
begin
	K_expected = 1'bX;
end 

// expected Q
initial
begin
	Q_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected J1
initial
begin
	J1_expected = 1'bX;
end 

// expected K1
initial
begin
	K1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 
// generate trigger
always @(J_expected or J or J1_expected or J1 or K_expected or K or K1_expected or K1 or Q_expected or Q or Q1_expected or Q1 or Q2_expected or Q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected J = %b | expected J1 = %b | expected K = %b | expected K1 = %b | expected Q = %b | expected Q1 = %b | expected Q2 = %b | ",J_expected_prev,J1_expected_prev,K_expected_prev,K1_expected_prev,Q_expected_prev,Q1_expected_prev,Q2_expected_prev);
	$display("| real J = %b | real J1 = %b | real K = %b | real K1 = %b | real Q = %b | real Q1 = %b | real Q2 = %b | ",J_prev,J1_prev,K_prev,K1_prev,Q_prev,Q1_prev,Q2_prev);
`endif
	if (
		( J_expected_prev !== 1'bx ) && ( J_prev !== J_expected_prev )
		&& ((J_expected_prev !== last_J_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J_expected_prev);
		$display ("     Real value = %b", J_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_J_exp = J_expected_prev;
	end
	if (
		( J1_expected_prev !== 1'bx ) && ( J1_prev !== J1_expected_prev )
		&& ((J1_expected_prev !== last_J1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J1_expected_prev);
		$display ("     Real value = %b", J1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_J1_exp = J1_expected_prev;
	end
	if (
		( K_expected_prev !== 1'bx ) && ( K_prev !== K_expected_prev )
		&& ((K_expected_prev !== last_K_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K_expected_prev);
		$display ("     Real value = %b", K_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_K_exp = K_expected_prev;
	end
	if (
		( K1_expected_prev !== 1'bx ) && ( K1_prev !== K1_expected_prev )
		&& ((K1_expected_prev !== last_K1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K1_expected_prev);
		$display ("     Real value = %b", K1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_K1_exp = K1_expected_prev;
	end
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module flipflopJK_negedge_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg E1;
// wires                                               
wire J;
wire J1;
wire K;
wire K1;
wire Q;
wire Q1;
wire Q2;

wire sampler;                             

// assign statements (if any)                          
flipflopJK_negedge i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.E1(E1),
	.J(J),
	.J1(J1),
	.K(K),
	.K1(K1),
	.Q(Q),
	.Q1(Q1),
	.Q2(Q2)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// E1
initial
begin
	E1 = 1'b1;
end 

flipflopJK_negedge_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.E1(E1),
	.sampler_tx(sampler)
);

flipflopJK_negedge_vlg_check_tst tb_out(
	.J(J),
	.J1(J1),
	.K(K),
	.K1(K1),
	.Q(Q),
	.Q1(Q1),
	.Q2(Q2),
	.sampler_rx(sampler)
);
endmodule

