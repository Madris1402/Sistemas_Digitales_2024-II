// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2024 10:57:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Pastillero
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Pastillero_vlg_sample_tst(
	RST,
	clk,
	w,
	x,
	y,
	z,
	sampler_tx
);
input  RST;
input  clk;
input  w;
input  x;
input  y;
input  z;
output sampler_tx;

reg sample;
time current_time;
always @(RST or clk or w or x or y or z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Pastillero_vlg_check_tst (
	AB,
	E,
	sampler_rx
);
input [3:0] AB;
input [10:0] E;
input sampler_rx;

reg [3:0] AB_expected;
reg [10:0] E_expected;

reg [3:0] AB_prev;
reg [10:0] E_prev;

reg [3:0] AB_expected_prev;
reg [10:0] E_expected_prev;

reg [3:0] last_AB_exp;
reg [10:0] last_E_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	AB_prev = AB;
	E_prev = E;
end

// update expected /o prevs

always @(trigger)
begin
	AB_expected_prev = AB_expected;
	E_expected_prev = E_expected;
end


// expected AB[ 3 ]
initial
begin
	AB_expected[3] = 1'bX;
end 
// expected AB[ 2 ]
initial
begin
	AB_expected[2] = 1'bX;
end 
// expected AB[ 1 ]
initial
begin
	AB_expected[1] = 1'bX;
end 
// expected AB[ 0 ]
initial
begin
	AB_expected[0] = 1'bX;
end 
// expected E[ 10 ]
initial
begin
	E_expected[10] = 1'bX;
end 
// expected E[ 9 ]
initial
begin
	E_expected[9] = 1'bX;
end 
// expected E[ 8 ]
initial
begin
	E_expected[8] = 1'bX;
end 
// expected E[ 7 ]
initial
begin
	E_expected[7] = 1'bX;
end 
// expected E[ 6 ]
initial
begin
	E_expected[6] = 1'bX;
end 
// expected E[ 5 ]
initial
begin
	E_expected[5] = 1'bX;
end 
// expected E[ 4 ]
initial
begin
	E_expected[4] = 1'bX;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
end 
// generate trigger
always @(AB_expected or AB or E_expected or E)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AB = %b | expected E = %b | ",AB_expected_prev,E_expected_prev);
	$display("| real AB = %b | real E = %b | ",AB_prev,E_prev);
`endif
	if (
		( AB_expected_prev[0] !== 1'bx ) && ( AB_prev[0] !== AB_expected_prev[0] )
		&& ((AB_expected_prev[0] !== last_AB_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_expected_prev);
		$display ("     Real value = %b", AB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_exp[0] = AB_expected_prev[0];
	end
	if (
		( AB_expected_prev[1] !== 1'bx ) && ( AB_prev[1] !== AB_expected_prev[1] )
		&& ((AB_expected_prev[1] !== last_AB_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_expected_prev);
		$display ("     Real value = %b", AB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_exp[1] = AB_expected_prev[1];
	end
	if (
		( AB_expected_prev[2] !== 1'bx ) && ( AB_prev[2] !== AB_expected_prev[2] )
		&& ((AB_expected_prev[2] !== last_AB_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_expected_prev);
		$display ("     Real value = %b", AB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_exp[2] = AB_expected_prev[2];
	end
	if (
		( AB_expected_prev[3] !== 1'bx ) && ( AB_prev[3] !== AB_expected_prev[3] )
		&& ((AB_expected_prev[3] !== last_AB_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_expected_prev);
		$display ("     Real value = %b", AB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_exp[3] = AB_expected_prev[3];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end
	if (
		( E_expected_prev[4] !== 1'bx ) && ( E_prev[4] !== E_expected_prev[4] )
		&& ((E_expected_prev[4] !== last_E_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[4] = E_expected_prev[4];
	end
	if (
		( E_expected_prev[5] !== 1'bx ) && ( E_prev[5] !== E_expected_prev[5] )
		&& ((E_expected_prev[5] !== last_E_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[5] = E_expected_prev[5];
	end
	if (
		( E_expected_prev[6] !== 1'bx ) && ( E_prev[6] !== E_expected_prev[6] )
		&& ((E_expected_prev[6] !== last_E_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[6] = E_expected_prev[6];
	end
	if (
		( E_expected_prev[7] !== 1'bx ) && ( E_prev[7] !== E_expected_prev[7] )
		&& ((E_expected_prev[7] !== last_E_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[7] = E_expected_prev[7];
	end
	if (
		( E_expected_prev[8] !== 1'bx ) && ( E_prev[8] !== E_expected_prev[8] )
		&& ((E_expected_prev[8] !== last_E_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[8] = E_expected_prev[8];
	end
	if (
		( E_expected_prev[9] !== 1'bx ) && ( E_prev[9] !== E_expected_prev[9] )
		&& ((E_expected_prev[9] !== last_E_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[9] = E_expected_prev[9];
	end
	if (
		( E_expected_prev[10] !== 1'bx ) && ( E_prev[10] !== E_expected_prev[10] )
		&& ((E_expected_prev[10] !== last_E_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[10] = E_expected_prev[10];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Pastillero_vlg_vec_tst();
// constants                                           
// general purpose registers
reg RST;
reg clk;
reg w;
reg x;
reg y;
reg z;
// wires                                               
wire [3:0] AB;
wire [10:0] E;

wire sampler;                             

// assign statements (if any)                          
Pastillero i1 (
// port map - connection between master ports and signals/registers   
	.AB(AB),
	.E(E),
	.RST(RST),
	.clk(clk),
	.w(w),
	.x(x),
	.y(y),
	.z(z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// RST
initial
begin
	RST = 1'b1;
end 

// w
initial
begin
	w = 1'b1;
end 

// x
initial
begin
	x = 1'b1;
end 

// y
initial
begin
	y = 1'b1;
end 

// z
initial
begin
	z = 1'b1;
end 

Pastillero_vlg_sample_tst tb_sample (
	.RST(RST),
	.clk(clk),
	.w(w),
	.x(x),
	.y(y),
	.z(z),
	.sampler_tx(sampler)
);

Pastillero_vlg_check_tst tb_out(
	.AB(AB),
	.E(E),
	.sampler_rx(sampler)
);
endmodule

