// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2024 22:24:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rx
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rx_vlg_sample_tst(
	ck,
	rx,
	sampler_tx
);
input  ck;
input  rx;
output sampler_tx;

reg sample;
time current_time;
always @(ck or rx)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rx_vlg_check_tst (
	MF,
	Mckd,
	Mrc,
	dat,
	stb,
	sampler_rx
);
input  MF;
input  Mckd;
input [9:0] Mrc;
input [7:0] dat;
input  stb;
input sampler_rx;

reg  MF_expected;
reg  Mckd_expected;
reg [9:0] Mrc_expected;
reg [7:0] dat_expected;
reg  stb_expected;

reg  MF_prev;
reg  Mckd_prev;
reg [9:0] Mrc_prev;
reg [7:0] dat_prev;
reg  stb_prev;

reg  MF_expected_prev;
reg  Mckd_expected_prev;
reg [9:0] Mrc_expected_prev;
reg [7:0] dat_expected_prev;
reg  stb_expected_prev;

reg  last_MF_exp;
reg  last_Mckd_exp;
reg [9:0] last_Mrc_exp;
reg [7:0] last_dat_exp;
reg  last_stb_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	MF_prev = MF;
	Mckd_prev = Mckd;
	Mrc_prev = Mrc;
	dat_prev = dat;
	stb_prev = stb;
end

// update expected /o prevs

always @(trigger)
begin
	MF_expected_prev = MF_expected;
	Mckd_expected_prev = Mckd_expected;
	Mrc_expected_prev = Mrc_expected;
	dat_expected_prev = dat_expected;
	stb_expected_prev = stb_expected;
end



// expected MF
initial
begin
	MF_expected = 1'bX;
end 

// expected Mckd
initial
begin
	Mckd_expected = 1'bX;
end 
// expected Mrc[ 9 ]
initial
begin
	Mrc_expected[9] = 1'bX;
end 
// expected Mrc[ 8 ]
initial
begin
	Mrc_expected[8] = 1'bX;
end 
// expected Mrc[ 7 ]
initial
begin
	Mrc_expected[7] = 1'bX;
end 
// expected Mrc[ 6 ]
initial
begin
	Mrc_expected[6] = 1'bX;
end 
// expected Mrc[ 5 ]
initial
begin
	Mrc_expected[5] = 1'bX;
end 
// expected Mrc[ 4 ]
initial
begin
	Mrc_expected[4] = 1'bX;
end 
// expected Mrc[ 3 ]
initial
begin
	Mrc_expected[3] = 1'bX;
end 
// expected Mrc[ 2 ]
initial
begin
	Mrc_expected[2] = 1'bX;
end 
// expected Mrc[ 1 ]
initial
begin
	Mrc_expected[1] = 1'bX;
end 
// expected Mrc[ 0 ]
initial
begin
	Mrc_expected[0] = 1'bX;
end 

// expected stb
initial
begin
	stb_expected = 1'bX;
end 
// expected dat[ 7 ]
initial
begin
	dat_expected[7] = 1'bX;
end 
// expected dat[ 6 ]
initial
begin
	dat_expected[6] = 1'bX;
end 
// expected dat[ 5 ]
initial
begin
	dat_expected[5] = 1'bX;
end 
// expected dat[ 4 ]
initial
begin
	dat_expected[4] = 1'bX;
end 
// expected dat[ 3 ]
initial
begin
	dat_expected[3] = 1'bX;
end 
// expected dat[ 2 ]
initial
begin
	dat_expected[2] = 1'bX;
end 
// expected dat[ 1 ]
initial
begin
	dat_expected[1] = 1'bX;
end 
// expected dat[ 0 ]
initial
begin
	dat_expected[0] = 1'bX;
end 
// generate trigger
always @(MF_expected or MF or Mckd_expected or Mckd or Mrc_expected or Mrc or dat_expected or dat or stb_expected or stb)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MF = %b | expected Mckd = %b | expected Mrc = %b | expected dat = %b | expected stb = %b | ",MF_expected_prev,Mckd_expected_prev,Mrc_expected_prev,dat_expected_prev,stb_expected_prev);
	$display("| real MF = %b | real Mckd = %b | real Mrc = %b | real dat = %b | real stb = %b | ",MF_prev,Mckd_prev,Mrc_prev,dat_prev,stb_prev);
`endif
	if (
		( MF_expected_prev !== 1'bx ) && ( MF_prev !== MF_expected_prev )
		&& ((MF_expected_prev !== last_MF_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MF_expected_prev);
		$display ("     Real value = %b", MF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MF_exp = MF_expected_prev;
	end
	if (
		( Mckd_expected_prev !== 1'bx ) && ( Mckd_prev !== Mckd_expected_prev )
		&& ((Mckd_expected_prev !== last_Mckd_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mckd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mckd_expected_prev);
		$display ("     Real value = %b", Mckd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mckd_exp = Mckd_expected_prev;
	end
	if (
		( Mrc_expected_prev[0] !== 1'bx ) && ( Mrc_prev[0] !== Mrc_expected_prev[0] )
		&& ((Mrc_expected_prev[0] !== last_Mrc_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[0] = Mrc_expected_prev[0];
	end
	if (
		( Mrc_expected_prev[1] !== 1'bx ) && ( Mrc_prev[1] !== Mrc_expected_prev[1] )
		&& ((Mrc_expected_prev[1] !== last_Mrc_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[1] = Mrc_expected_prev[1];
	end
	if (
		( Mrc_expected_prev[2] !== 1'bx ) && ( Mrc_prev[2] !== Mrc_expected_prev[2] )
		&& ((Mrc_expected_prev[2] !== last_Mrc_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[2] = Mrc_expected_prev[2];
	end
	if (
		( Mrc_expected_prev[3] !== 1'bx ) && ( Mrc_prev[3] !== Mrc_expected_prev[3] )
		&& ((Mrc_expected_prev[3] !== last_Mrc_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[3] = Mrc_expected_prev[3];
	end
	if (
		( Mrc_expected_prev[4] !== 1'bx ) && ( Mrc_prev[4] !== Mrc_expected_prev[4] )
		&& ((Mrc_expected_prev[4] !== last_Mrc_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[4] = Mrc_expected_prev[4];
	end
	if (
		( Mrc_expected_prev[5] !== 1'bx ) && ( Mrc_prev[5] !== Mrc_expected_prev[5] )
		&& ((Mrc_expected_prev[5] !== last_Mrc_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[5] = Mrc_expected_prev[5];
	end
	if (
		( Mrc_expected_prev[6] !== 1'bx ) && ( Mrc_prev[6] !== Mrc_expected_prev[6] )
		&& ((Mrc_expected_prev[6] !== last_Mrc_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[6] = Mrc_expected_prev[6];
	end
	if (
		( Mrc_expected_prev[7] !== 1'bx ) && ( Mrc_prev[7] !== Mrc_expected_prev[7] )
		&& ((Mrc_expected_prev[7] !== last_Mrc_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[7] = Mrc_expected_prev[7];
	end
	if (
		( Mrc_expected_prev[8] !== 1'bx ) && ( Mrc_prev[8] !== Mrc_expected_prev[8] )
		&& ((Mrc_expected_prev[8] !== last_Mrc_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[8] = Mrc_expected_prev[8];
	end
	if (
		( Mrc_expected_prev[9] !== 1'bx ) && ( Mrc_prev[9] !== Mrc_expected_prev[9] )
		&& ((Mrc_expected_prev[9] !== last_Mrc_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mrc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mrc_expected_prev);
		$display ("     Real value = %b", Mrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Mrc_exp[9] = Mrc_expected_prev[9];
	end
	if (
		( dat_expected_prev[0] !== 1'bx ) && ( dat_prev[0] !== dat_expected_prev[0] )
		&& ((dat_expected_prev[0] !== last_dat_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[0] = dat_expected_prev[0];
	end
	if (
		( dat_expected_prev[1] !== 1'bx ) && ( dat_prev[1] !== dat_expected_prev[1] )
		&& ((dat_expected_prev[1] !== last_dat_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[1] = dat_expected_prev[1];
	end
	if (
		( dat_expected_prev[2] !== 1'bx ) && ( dat_prev[2] !== dat_expected_prev[2] )
		&& ((dat_expected_prev[2] !== last_dat_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[2] = dat_expected_prev[2];
	end
	if (
		( dat_expected_prev[3] !== 1'bx ) && ( dat_prev[3] !== dat_expected_prev[3] )
		&& ((dat_expected_prev[3] !== last_dat_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[3] = dat_expected_prev[3];
	end
	if (
		( dat_expected_prev[4] !== 1'bx ) && ( dat_prev[4] !== dat_expected_prev[4] )
		&& ((dat_expected_prev[4] !== last_dat_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[4] = dat_expected_prev[4];
	end
	if (
		( dat_expected_prev[5] !== 1'bx ) && ( dat_prev[5] !== dat_expected_prev[5] )
		&& ((dat_expected_prev[5] !== last_dat_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[5] = dat_expected_prev[5];
	end
	if (
		( dat_expected_prev[6] !== 1'bx ) && ( dat_prev[6] !== dat_expected_prev[6] )
		&& ((dat_expected_prev[6] !== last_dat_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[6] = dat_expected_prev[6];
	end
	if (
		( dat_expected_prev[7] !== 1'bx ) && ( dat_prev[7] !== dat_expected_prev[7] )
		&& ((dat_expected_prev[7] !== last_dat_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dat[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dat_expected_prev);
		$display ("     Real value = %b", dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dat_exp[7] = dat_expected_prev[7];
	end
	if (
		( stb_expected_prev !== 1'bx ) && ( stb_prev !== stb_expected_prev )
		&& ((stb_expected_prev !== last_stb_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stb_expected_prev);
		$display ("     Real value = %b", stb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_stb_exp = stb_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rx_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg rx;
// wires                                               
wire MF;
wire Mckd;
wire [9:0] Mrc;
wire [7:0] dat;
wire stb;

wire sampler;                             

// assign statements (if any)                          
rx i1 (
// port map - connection between master ports and signals/registers   
	.MF(MF),
	.Mckd(Mckd),
	.Mrc(Mrc),
	.ck(ck),
	.dat(dat),
	.rx(rx),
	.stb(stb)
);

// ck
always
begin
	ck = 1'b0;
	ck = #250 1'b1;
	#250;
end 

// rx
initial
begin
	rx = 1'b1;
	rx = #10000 1'b0;
	rx = #10000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #10000 1'b0;
	rx = #10000 1'b1;
	rx = #15000 1'b0;
	rx = #20000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #10000 1'b0;
	rx = #20000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #5000 1'b1;
	rx = #5000 1'b0;
	rx = #45000 1'b1;
	rx = #5000 1'b0;
	rx = #45000 1'b1;
end 

rx_vlg_sample_tst tb_sample (
	.ck(ck),
	.rx(rx),
	.sampler_tx(sampler)
);

rx_vlg_check_tst tb_out(
	.MF(MF),
	.Mckd(Mckd),
	.Mrc(Mrc),
	.dat(dat),
	.stb(stb),
	.sampler_rx(sampler)
);
endmodule

