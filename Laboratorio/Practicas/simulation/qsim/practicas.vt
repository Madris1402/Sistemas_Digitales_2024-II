// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/30/2024 20:15:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    prot
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module prot_vlg_sample_tst(
	Rx,
	ck,
	cmd,
	sampler_tx
);
input  Rx;
input  ck;
input [3:0] cmd;
output sampler_tx;

reg sample;
time current_time;
always @(Rx or ck or cmd)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module prot_vlg_check_tst (
	MF,
	Mtbt,
	Tx,
	sampler_rx
);
input  MF;
input  Mtbt;
input  Tx;
input sampler_rx;

reg  MF_expected;
reg  Mtbt_expected;
reg  Tx_expected;

reg  MF_prev;
reg  Mtbt_prev;
reg  Tx_prev;

reg  MF_expected_prev;
reg  Mtbt_expected_prev;
reg  Tx_expected_prev;

reg  last_MF_exp;
reg  last_Mtbt_exp;
reg  last_Tx_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	MF_prev = MF;
	Mtbt_prev = Mtbt;
	Tx_prev = Tx;
end

// update expected /o prevs

always @(trigger)
begin
	MF_expected_prev = MF_expected;
	Mtbt_expected_prev = Mtbt_expected;
	Tx_expected_prev = Tx_expected;
end



// expected MF
initial
begin
	MF_expected = 1'bX;
end 

// expected Mtbt
initial
begin
	Mtbt_expected = 1'bX;
end 

// expected Tx
initial
begin
	Tx_expected = 1'bX;
end 
// generate trigger
always @(MF_expected or MF or Mtbt_expected or Mtbt or Tx_expected or Tx)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MF = %b | expected Mtbt = %b | expected Tx = %b | ",MF_expected_prev,Mtbt_expected_prev,Tx_expected_prev);
	$display("| real MF = %b | real Mtbt = %b | real Tx = %b | ",MF_prev,Mtbt_prev,Tx_prev);
`endif
	if (
		( MF_expected_prev !== 1'bx ) && ( MF_prev !== MF_expected_prev )
		&& ((MF_expected_prev !== last_MF_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MF_expected_prev);
		$display ("     Real value = %b", MF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MF_exp = MF_expected_prev;
	end
	if (
		( Mtbt_expected_prev !== 1'bx ) && ( Mtbt_prev !== Mtbt_expected_prev )
		&& ((Mtbt_expected_prev !== last_Mtbt_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtbt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtbt_expected_prev);
		$display ("     Real value = %b", Mtbt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtbt_exp = Mtbt_expected_prev;
	end
	if (
		( Tx_expected_prev !== 1'bx ) && ( Tx_prev !== Tx_expected_prev )
		&& ((Tx_expected_prev !== last_Tx_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tx_expected_prev);
		$display ("     Real value = %b", Tx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Tx_exp = Tx_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module prot_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Rx;
reg ck;
reg [3:0] cmd;
// wires                                               
wire MF;
wire Mtbt;
wire Tx;

wire sampler;                             

// assign statements (if any)                          
prot i1 (
// port map - connection between master ports and signals/registers   
	.MF(MF),
	.Mtbt(Mtbt),
	.Rx(Rx),
	.Tx(Tx),
	.ck(ck),
	.cmd(cmd)
);

// ck
always
begin
	ck = 1'b0;
	ck = #250 1'b1;
	#250;
end 
// cmd[ 3 ]
initial
begin
	cmd[3] = 1'b0;
	cmd[3] = #100000 1'b1;
	cmd[3] = #5000 1'b0;
	cmd[3] = #395000 1'b1;
	cmd[3] = #10000 1'b0;
end 
// cmd[ 2 ]
initial
begin
	cmd[2] = 1'b0;
end 
// cmd[ 1 ]
initial
begin
	cmd[1] = 1'b0;
end 
// cmd[ 0 ]
initial
begin
	cmd[0] = 1'b0;
	cmd[0] = #100000 1'b1;
	cmd[0] = #5000 1'b0;
	cmd[0] = #395000 1'b1;
	cmd[0] = #10000 1'b0;
end 

// Rx
initial
begin
	Rx = 1'b0;
end 

prot_vlg_sample_tst tb_sample (
	.Rx(Rx),
	.ck(ck),
	.cmd(cmd),
	.sampler_tx(sampler)
);

prot_vlg_check_tst tb_out(
	.MF(MF),
	.Mtbt(Mtbt),
	.Tx(Tx),
	.sampler_rx(sampler)
);
endmodule

